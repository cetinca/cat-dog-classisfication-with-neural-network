type: edu
files:
- name: test/__init__.py
  visible: false
  learner_created: false
- name: test/tests.py
  visible: false
  text: |
    import os
    os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
    from hstest import StageTest, TestCase, CheckResult
    from hstest.stage_test import List


    class ImageLoadTest(StageTest):

        def generate(self) -> List[TestCase]:
            return [TestCase(time_limit=1000000)]

        def check(self, reply: str, attach):

            if not reply:
                return CheckResult.wrong("No information was printed to the standard output")

            std_out = [txt for txt in reply.split('\n') if txt]

            if len(std_out) != 4:
                return CheckResult.wrong("Incorrect number of lines printed;\n"
                                         "There should be 4 lines printed.")

            for idx, value in enumerate(std_out):
                if idx == 0:
                    if value != "Found 500 images belonging to 2 classes.":
                        return CheckResult.wrong("`train_data_gen` comes first;\n"
                                                 "There should be 500 images. Make sure to follow all the steps from the objectives.")
                elif idx == 1:
                    if value != "Found 200 images belonging to 2 classes.":
                        return CheckResult.wrong("`valid_data_gen` comes second;\n"
                                                 "There should be 200 images. Make sure to follow all the steps from the objectives.")
                elif idx == 2:
                    if value != "Found 50 images belonging to 1 classes.":
                        return CheckResult.wrong("`test_data_gen` comes third;\n"
                                                 "There should be 50 images. Make sure to follow all the steps from the objectives.")
                elif idx == 3:
                    if len(value.split()) != 4:
                        return CheckResult.wrong("Return height, width, batch_size, and shuffle values in this order")
                    height, width, batch_size, shuffle = value.split()

                    if height != width and (height != "150" or height != "150.0"):
                        return CheckResult.wrong("The image height and width value should be 150")

                    if batch_size != "64" and batch_size != "64.0":
                        return CheckResult.wrong("Incorrect batch size")

                    if shuffle != "False":
                        return CheckResult.wrong("Do not shuffle `test_data_gen`")

            return CheckResult.correct()


    if __name__ == '__main__':
        ImageLoadTest().run_tests()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from test.tests import ImageLoadTest

    if __name__ == '__main__':
        ImageLoadTest().run_tests()
  learner_created: false
- name: transfer.py
  visible: true
  text: |
    import os
    os.environ['TF_CPP_MIN_LOG_LEVEL'] = '2'
    import requests
    from zipfile import ZipFile
    import sys

    if __name__ == '__main__':

        if not os.path.exists('../Data'):
            os.mkdir('../Data')

        # if not os.path.exists('../ImageData'):
        #     os.mkdir('../ImageData')

        if not os.path.exists('../SavedModels'):
            os.mkdir('../SavedModels')

        if not os.path.exists('../SavedHistory'):
            os.mkdir('../SavedHistory')

        # Download data if it is unavailable.
        if 'cats-and-dogs-images.zip' not in os.listdir('../Data'):
            sys.stderr.write("[INFO] Image dataset is loading.\n")
            url = "https://www.dropbox.com/s/jgv5zpw41ydtfww/cats-and-dogs-images.zip?dl=1"
            r = requests.get(url, allow_redirects=True)
            open('../Data/cats-and-dogs-images.zip', 'wb').write(r.content)
            sys.stderr.write("[INFO] Loaded.\n")

            sys.stderr.write("\n[INFO] Extracting files.\n")
            with ZipFile('../Data/cats-and-dogs-images.zip', 'r') as zip:
                zip.extractall(path="../Data")
                sys.stderr.write("[INFO] Completed.\n")

        # write your code here
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/27993#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Tue, 27 Jun 2023 15:04:31 UTC"
record: 1
